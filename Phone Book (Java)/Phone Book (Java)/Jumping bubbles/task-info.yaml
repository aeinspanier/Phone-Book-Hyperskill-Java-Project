type: edu
files:
  - name: src/phonebook/Main.java
    visible: true
    text: |
      package phonebook;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/PhoneBookTest.java
    visible: false
    text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n                new TestCase().setTimeLimit(30 * 60\
    \ * 1000)\n        );\n    }\n    \n    private CheckResult checkPhrases(String\
    \ reply, String... phrases) {\n        reply = reply.toLowerCase();\n        for\
    \ (String phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    @Override\n\
    \    public CheckResult check(String reply, Object clue) {\n        long realTime\
    \ = System.currentTimeMillis() - timeOnTestStart;\n        \n        reply = reply.toLowerCase();\n\
    \        \n        CheckResult res = checkPhrases(reply,\n                \"found\"\
    ,\n                \"min.\",\n                \"sec.\",\n                \"ms.\"\
    ,\n                \"sorting time\",\n                \"searching time\",\n  \
    \              \"linear search\",\n                \"bubble sort\",\n        \
    \        \"jump search\");\n        if (!res.isCorrect()) {\n            return\
    \ res;\n        }\n        \n        List<String> stat1 = findAll(reply, \"500\
    \ / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n     \
    \   \n        if (stat1.size() + stat2.size() < 2) {\n            return CheckResult.wrong(\"\
    Your output should contain twice the phrase `500 / 500`\");\n        }\n     \
    \   \n        \n        List<String> timestamps = findAll(reply, timeRegex);\n\
    \        if (timestamps.size() != 4) {\n            return CheckResult.wrong(\"\
    Your output should contain 4 timer outputs, but found \"\n                   \
    \ + timestamps.size());\n        }\n        // should not fail..\n        long\
    \ t1 = parseTimestamp(timestamps.get(0));\n        long t2 = parseTimestamp(timestamps.get(1));\n\
    \        long t3 = parseTimestamp(timestamps.get(2));\n        long t4 = parseTimestamp(timestamps.get(3));\n\
    \        \n        if (Math.abs(t3 + t4 - t2) > 100) {\n            return CheckResult.wrong(\"\
    Your third and fourth timer outputs in total (sorting and searching) \" +\n  \
    \                  \"should be equal to the second (total search time).\");\n\
    \        }\n        \n        long estimatedTime = t1 + t2;\n        if (realTime\
    \ < 1000) {\n            return CheckResult.wrong(\"Your program completes too\
    \ fast. Faster than a second!\");\n        }\n        \n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        if (reply.toLowerCase().contains(\"\
    stopped\")) {\n            if (t3 < t1) {\n                return CheckResult.wrong(\"\
    You printed `stopped`, \" +\n                        \"but the sorting time was\
    \ less than the first linear search time.\");\n            }\n        }\n    \
    \    \n        return CheckResult.correct();\n    }\n}\n"
    learner_created: false
  - name: src/phonebook/SearchVisitor.java
    visible: true
    text: |
      package phonebook;
      
      import javax.sound.sampled.Line;
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.List;
      import java.util.concurrent.TimeUnit;
      
      public class SearchVisitor implements Visitor{
      
          List<Search> searchList = new ArrayList<Search>();
          Directory directory;
          List<String> names;
      
          public SearchVisitor(Directory directory, List<String> names) {
              this.directory = directory;
              this.names = names;
              searchList.add(new LinearSearch(directory, names));
          }
      
          private void startSearchMsg() {
              System.out.println("Start searching...");
          }
      
          private void printSearchStatistics(int found, long timeDiff) {
              long minutes = TimeUnit.MILLISECONDS.toMinutes(timeDiff);
              long seconds = (TimeUnit.MILLISECONDS.toSeconds(timeDiff) % 60);
              long ms = timeDiff - (minutes * 1000 * 60) - (seconds * 1000);
              System.out.printf("Found %d / %d entries. Time taken: %d min. %d sec. %d ms.", found, this.names.size(), minutes, seconds, ms);
          }
      
          public void visitAllAlgorithms() {
              for (Search search : searchList) {
                  startSearchMsg();
                  long startTime = System.currentTimeMillis();
                  int numFound = search.accept(this);
                  long endTime = System.currentTimeMillis();
                  long timeDiff = endTime - startTime;
                  printSearchStatistics(numFound, timeDiff);
              }
          }
      
          @Override
          public int visitLinearSearch(LinearSearch linSearch) {
              return linSearch.search(this.directory.getDirectoryEntries());
          }
      }
    learner_created: true
  - name: src/phonebook/DirectoryEntry.java
    visible: true
    text: |
      package phonebook;
      
      public class DirectoryEntry {
          public String name;
          public int id;
          public DirectoryEntry(String name, int id) {
              this.name = name;
              this.id = id;
          }
      }
    learner_created: true
  - name: src/phonebook/Directory.java
    visible: true
    text: |
      package phonebook;
      
      import java.io.IOException;
      import java.nio.file.Files;
      import java.nio.file.Paths;
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.List;
      
      public class Directory {
          List<DirectoryEntry> directoryEntries = new ArrayList<DirectoryEntry>();
          public Directory(List<String> entries) {
              for (String entry : entries) {
                  String[] splitEntry = entry.split(" ", 2);
                  directoryEntries.add(new DirectoryEntry( splitEntry[1], Integer.parseInt(splitEntry[0])));
              }
          }
      
          public List<DirectoryEntry> getDirectoryEntries() {
              return this.directoryEntries;
          }
      
      }
    learner_created: true
  - name: src/phonebook/LinearSearch.java
    visible: true
    text: |
      package phonebook;
      
      import java.util.List;
      
      public class LinearSearch implements Search {
          Directory directory;
          List<String> names;
          public LinearSearch(Directory directory, List<String> names) {
              this.directory = directory;
              this.names = names;
          }
      
          public int accept(Visitor visitor) {
              return visitor.visitLinearSearch(this);
          }
      
          public int search(List<DirectoryEntry> directoryEntries) {
              int found = 0;
              for (String name : this.names) {
                  for (DirectoryEntry entry : directoryEntries) {
                      if (name.equals(entry.name)) {
                          found++;
                      }
                  }
              }
              return found;
          }
      }
    learner_created: true
  - name: src/phonebook/Visitor.java
    visible: true
    text: |
      package phonebook;
      
      public interface Visitor {
          int visitLinearSearch(LinearSearch linSearch);
      }
    learner_created: true
  - name: src/phonebook/PhoneBookReader.java
    visible: true
    text: |
      package phonebook;
      
      import java.io.IOException;
      import java.nio.file.Files;
      import java.nio.file.Paths;
      import java.util.List;
      
      public class PhoneBookReader {
          public List<String> readLines(String filePath) {
              try {
                  return Files.readAllLines(Paths.get(filePath));
              } catch (IOException ex) {
                  System.out.println("reading " + filePath + " failed - IOException");
              }
              return null;
          }
      }
    learner_created: true
  - name: src/phonebook/Search.java
    visible: true
    text: |
      package phonebook;
      
      import java.util.List;
      
      public interface Search {
          int accept(Visitor visitor);
          int search(List<DirectoryEntry> directoryEntryList);
      }
    learner_created: true
feedback_link: https://hyperskill.org/projects/63/stages/341/implement#comment
status: Unchecked
record: -1
