type: edu
files:
  - name: src/phonebook/Main.java
    visible: true
    text: |
      package phonebook;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/PhoneBookTest.java
    visible: false
    text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n            new TestCase().setTimeLimit(30 * 60 * 1000)\n\
    \        );\n    }\n    \n    \n    private CheckResult checkPhrases(String reply,\
    \ String... phrases) {\n        reply = reply.toLowerCase();\n        for (String\
    \ phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    \n    \n\
    \    @Override\n    public CheckResult check(String reply, Object clue) {\n  \
    \      long realTime = System.currentTimeMillis() - timeOnTestStart;\n       \
    \ reply = reply.toLowerCase();\n        CheckResult res = checkPhrases(reply,\n\
    \                \"found\",\n                \"min.\",\n                \"sec.\"\
    ,\n                \"ms.\",\n                \"sorting time\",\n             \
    \   \"searching time\",\n                \"linear search\",\n                \"\
    bubble sort\",\n                \"jump search\",\n                \"quick sort\"\
    ,\n                \"binary search\",\n                \"hash table\",\n     \
    \           \"creating time\"\n        );\n        if (!res.isCorrect()) {\n \
    \           return res;\n        }\n    \n        List<String> stat1 = findAll(reply,\
    \ \"500 / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n\
    \    \n        if (stat1.size() + stat2.size() < 4) {\n            return CheckResult.wrong(\"\
    Your output should contain 4 times the phrase `500 / 500`\");\n        }\n   \
    \ \n        List<String> timestamps = findAll(reply, timeRegex);\n        if (timestamps.size()\
    \ != 10) {\n            return CheckResult.wrong(\"Your output should contain\
    \ 10 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        // qsort\n    \
    \    long t5 = parseTimestamp(timestamps.get(4));\n        long t6 = parseTimestamp(timestamps.get(5));\n\
    \        long t7 = parseTimestamp(timestamps.get(6));\n        // hash table\n\
    \        long t8 = parseTimestamp(timestamps.get(7));\n        long t9 = parseTimestamp(timestamps.get(8));\n\
    \        long t10 = parseTimestamp(timestamps.get(9));\n    \n        if (Math.abs(t3\
    \ + t4 - t2) > 100) {\n            return CheckResult.wrong(\"Your third and fourth\
    \ timer outputs in total (bubble sorting and searching) \" +\n               \
    \     \"should be equal to the second (total search time).\");\n        }\n  \
    \      if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (qsort and searching) \" +\n       \
    \             \"should be equal to the 5-th (total search time).\");\n       \
    \ }\n        if (Math.abs(t9 + t10 - t8) > 100) {\n            return CheckResult.wrong(\"\
    Your 9-th and 10-th timer outputs in total (creating hashtable and searching)\
    \ \" +\n                    \"should be equal to the 8-th (total search time).\"\
    );\n        }\n    \n        long estimatedTime = t1 + t2 + t5 + t8;\n       \
    \ if (realTime < 1000) {\n            return CheckResult.wrong(\"Your program\
    \ completes too fast. Faster than a second!\");\n        }\n\n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        if (t8 >= t5) {\n            return\
    \ CheckResult.wrong(\"Your hashtable works slower, than quick sort + binary search.\"\
    );\n        }\n        return CheckResult.correct();\n    }\n}\n"
    learner_created: false
  - name: src/phonebook/SearchVisitor.java
    visible: true
    text: |
      package phonebook;
      
      import javax.sound.sampled.Line;
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.List;
      import java.util.concurrent.TimeUnit;
      
      public class SearchVisitor implements Visitor{
      
          HashMap<String, Search> searches = new HashMap<>();
          String[] searchOrder = {"LinearSearch", "JumpSearch", "BinarySearch"};
      
          public SearchVisitor(Directory directory, List<String> names) {
              searches.put("LinearSearch", new LinearSearch(directory, names));
              searches.put("JumpSearch", new JumpSearch(directory, names));
              searches.put("BinarySearch", new BinarySearch(directory, names));
          }
      
          public void visitAllAlgorithms() {
              for (String searchName : this.searchOrder) {
                  Search search = this.searches.get(searchName);
                  search.accept(this);
                  System.out.println();
              }
          }
      
          @Override
          public void visitLinearSearch(LinearSearch linSearch) {
              System.out.println("Start searching (linear search)...");
              linSearch.search();
              linSearch.printStats();
              JumpSearch jumpSearch = (JumpSearch) this.searches.get("JumpSearch");
              jumpSearch.setMaxBubbleSortTime(linSearch.searchTime);
          }
      
          @Override
          public void visitJumpSearch(JumpSearch jumpSearch) {
              System.out.println("Start searching (bubble sort + jump search)...");
              jumpSearch.search();
              jumpSearch.printStats();
          }
      
          @Override
          public void visitBinarySearch(BinarySearch binSearch) {
              System.out.println("Start searching (quick sort + binary search)...");
              binSearch.search();
              binSearch.printStats();
          }
      
      }
    learner_created: true
  - name: src/phonebook/DirectoryEntry.java
    visible: true
    text: |
      package phonebook;
      
      public class DirectoryEntry {
          public String name;
          public int id;
          public DirectoryEntry(String name, int id) {
              this.name = name;
              this.id = id;
          }
      }
    learner_created: true
  - name: src/phonebook/Visitor.java
    visible: true
    text: |
      package phonebook;
      
      public interface Visitor {
          void visitLinearSearch(LinearSearch linSearch);
          void visitJumpSearch(JumpSearch jumpSearch);
          void visitBinarySearch(BinarySearch binSearch);
      }
    learner_created: true
  - name: src/phonebook/QuickSort.java
    visible: true
    text: |
      package phonebook;
      
      import java.util.List;
      
      public class QuickSort {
          private static int partition(List<DirectoryEntry> entries, int begin, int end) {
              DirectoryEntry pivot = entries.get(end);
              int i = (begin-1);
      
              for (int j = begin; j < end; j++) {
                  DirectoryEntry curEntry = entries.get(j);
                  if (curEntry.name.compareTo(pivot.name) <= 0) {
                      i++;
      
                      DirectoryEntry tmp = entries.get(i);
                      entries.set(i, curEntry);
                      entries.set(j, tmp);
                  }
              }
      
              DirectoryEntry swap = entries.get(i+1);
              entries.set(i+1, pivot);
              entries.set(end, swap);
      
              return i+1;
          }
      
          static List<DirectoryEntry> sort(List<DirectoryEntry> entries, int begin, int end) {
              if (begin < end) {
                  int partitionIndex = partition(entries, begin, end);
      
                  sort(entries, begin, partitionIndex-1);
                  sort(entries, partitionIndex+1, end);
              }
              return entries;
          }
      }
    learner_created: true
  - name: src/phonebook/BinarySearch.java
    visible: true
    text: |
      package phonebook;
      
      import java.util.List;
      
      public class BinarySearch implements Search{
          List<String> names;
          Directory directory;
          long sortTime;
          long searchTime;
          int found = 0;
      
          public BinarySearch(Directory directory, List<String> names) {
              this.names = names;
              this.directory = directory;
          }
      
          public void accept(Visitor visitor) {
              visitor.visitBinarySearch(this);
          }
      
          public void printStats() {
              TimeSpan totalTimeSpan = new TimeSpan(this.sortTime + this.searchTime);
              TimeSpan sortedTimeSpan = new TimeSpan(this.sortTime);
              TimeSpan searchTimeSpan = new TimeSpan(this.searchTime);
              System.out.printf("Found %d / %d entries. Time taken: %d min. %d sec. %d ms.\n", this.found, this.names.size(), totalTimeSpan.minutes, totalTimeSpan.seconds, totalTimeSpan.ms);
              String sortMsg = String.format("Sorting Time: %d min. %d sec. %d ms.", sortedTimeSpan.minutes, sortedTimeSpan.seconds, sortedTimeSpan.ms);
              System.out.println(sortMsg);
              System.out.printf("Searching Time: %d min. %d sec. %d ms.\n", searchTimeSpan.minutes, searchTimeSpan.seconds, searchTimeSpan.ms);
          }
      
          private int binarySearchForName(List<DirectoryEntry> entries, String name) {
              int l = 0;
              int r = entries.size() - 1;
      
              while (l <= r) {
                  int mid = (l+r)/2;
                  DirectoryEntry midEntry = entries.get(mid);
                  if(midEntry.name.compareTo(name) == 0) {
                      return 1;
                  } else if (midEntry.name.compareTo(name) < 0) {
                      l = mid + 1;
                  } else {
                      r = mid - 1;
                  }
              }
              return 0;
          }
      
          public void search(){
              long startSort = System.currentTimeMillis();
              List<DirectoryEntry> entries = this.directory.getDirectoryEntries();
              List<DirectoryEntry> sortedEntries = QuickSort.sort(entries, 0, entries.size()-1);
              this.sortTime = System.currentTimeMillis() - startSort;
      
              long startSearch = System.currentTimeMillis();
              for (String name : this.names) {
                  this.found += binarySearchForName(sortedEntries, name);
              }
              this.searchTime = System.currentTimeMillis() - startSearch;
          }
      }
    learner_created: true
  - name: src/phonebook/TimeSpan.java
    visible: true
    text: |
      package phonebook;
      
      import java.util.concurrent.TimeUnit;
      
      public class TimeSpan {
          long minutes;
          long seconds;
          long ms;
          public TimeSpan(long timespan) {
              this.minutes = TimeUnit.MILLISECONDS.toMinutes(timespan);
              this.seconds = (TimeUnit.MILLISECONDS.toSeconds(timespan) % 60);
              this.ms = timespan - (minutes * 1000 * 60) - (seconds * 1000);
          }
      }
    learner_created: true
  - name: src/phonebook/JumpSearch.java
    visible: true
    text: |
      package phonebook;
      
      import java.util.List;
      import java.util.concurrent.TimeUnit;
      
      public class JumpSearch implements Search {
          List<String> names;
          Directory directory;
          long maxBubbleSortTime;
          boolean sortStopped = false;
          long sortTime;
          long searchTime;
          int found = 0;
      
          public JumpSearch(Directory directory, List<String> names) {
              this.names = names;
              this.directory = directory;
          }
      
          public void accept(Visitor visitor) {
              visitor.visitJumpSearch(this);
          }
      
          public void printStats() {
              TimeSpan totalTimeSpan = new TimeSpan(this.sortTime + this.searchTime);
              TimeSpan sortedTimeSpan = new TimeSpan(this.sortTime);
              TimeSpan searchTimeSpan = new TimeSpan(this.searchTime);
              System.out.printf("Found %d / %d entries. Time taken: %d min. %d sec. %d ms.\n", this.found, this.names.size(), totalTimeSpan.minutes, totalTimeSpan.seconds, totalTimeSpan.ms);
              String sortMsg = String.format("Sorting Time: %d min. %d sec. %d ms.", sortedTimeSpan.minutes, sortedTimeSpan.seconds, sortedTimeSpan.ms);
              if (this.sortStopped) {
                  sortMsg += " - STOPPED, moved to linear search";
              }
              System.out.println(sortMsg);
              System.out.printf("Searching Time: %d min. %d sec. %d ms.\n", searchTimeSpan.minutes, searchTimeSpan.seconds, searchTimeSpan.ms);
          }
      
          int jumpSearchForName(List<DirectoryEntry> directoryEntryList, String name) {
              int prev = 0;
              int n = directoryEntryList.size();
              int step = (int) Math.floor(Math.sqrt(n));
              int ptr = step;
      
              //loop until current element is less than the given search element
              while (directoryEntryList.get(Math.min(ptr, n) - 1).name.compareTo(name) < 0) {
                  prev = ptr;
                  ptr += step;
                  if (prev >= n) return 0;
              }
      
              //perform linear search prev index element to given element
              while (directoryEntryList.get(prev).name.compareTo(name) < 0) {
                  prev++;
                  if (prev == Math.min(ptr, n)) return 0;
              }
      
              // Return index if element is found
              if (directoryEntryList.get(prev).name.compareTo(name) == 0) return 1;
      
              return 0;
      
          }
      
          public void search(){
              long startSort = System.currentTimeMillis();
              List<DirectoryEntry> sortedEntries = BubbleSort.sort(this.directory.getDirectoryEntries(), this.maxBubbleSortTime);
              long endSort = System.currentTimeMillis();
      
              if (sortedEntries.isEmpty()){
                  this.sortStopped = true;
              }
      
              this.sortTime = endSort - startSort;
      
              if (this.sortStopped) {
                  LinearSearch linSearch = new LinearSearch(this.directory, this.names);
                  linSearch.search();
                  this.searchTime = linSearch.endSearch - linSearch.startSearch;
                  this.found = linSearch.found;
              }else {
                  long startSearch = System.currentTimeMillis();
                  for (String name : this.names) {
                      this.found += jumpSearchForName(sortedEntries, name);
                  }
                  this.searchTime = System.currentTimeMillis() - startSearch;
              }
          }
      
          public void setMaxBubbleSortTime(long linearSearchTime) {
              this.maxBubbleSortTime = linearSearchTime * 10;
          }
      }
    learner_created: true
  - name: src/phonebook/Directory.java
    visible: true
    text: |
      package phonebook;
      
      import java.io.IOException;
      import java.nio.file.Files;
      import java.nio.file.Paths;
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.List;
      
      public class Directory {
          List<DirectoryEntry> directoryEntries = new ArrayList<DirectoryEntry>();
          public Directory(List<String> entries) {
              for (String entry : entries) {
                  String[] splitEntry = entry.split(" ", 2);
                  directoryEntries.add(new DirectoryEntry( splitEntry[1], Integer.parseInt(splitEntry[0])));
              }
          }
          public List<DirectoryEntry> getDirectoryEntries() {
              return this.directoryEntries;
          }
      }
    learner_created: true
  - name: src/phonebook/LinearSearch.java
    visible: true
    text: |
      package phonebook;
      
      import java.util.List;
      import java.util.concurrent.TimeUnit;
      
      public class LinearSearch implements Search {
          List<String> names;
          Directory directory;
          long startSearch;
          long endSearch;
          long searchTime;
          int found = 0;
      
          public LinearSearch(Directory directory, List<String> names) {
              this.names = names;
              this.directory = directory;
          }
      
          public void accept(Visitor visitor) {
              visitor.visitLinearSearch(this);
          }
      
          public void printStats() {
              this.searchTime = this.endSearch - this.startSearch;
              long minutes = TimeUnit.MILLISECONDS.toMinutes(this.searchTime);
              long seconds = (TimeUnit.MILLISECONDS.toSeconds(this.searchTime) % 60);
              long ms = this.searchTime - (minutes * 1000 * 60) - (seconds * 1000);
              System.out.printf("Found %d / %d entries. Time taken: %d min. %d sec. %d ms.\n", this.found, this.names.size(), minutes, seconds, ms);
          }
      
          public void search() {
              this.startSearch = System.currentTimeMillis();
              List<DirectoryEntry> directoryEntries = this.directory.getDirectoryEntries();
              for (String name : this.names) {
                  for (DirectoryEntry entry : directoryEntries) {
                      if (name.equals(entry.name)) {
                          this.found++;
                      }
                  }
              }
              this.endSearch = System.currentTimeMillis();
          }
      }
    learner_created: true
  - name: src/phonebook/PhoneBookReader.java
    visible: true
    text: |
      package phonebook;
      
      import java.io.IOException;
      import java.nio.file.Files;
      import java.nio.file.Paths;
      import java.util.List;
      
      public class PhoneBookReader {
          public List<String> readLines(String filePath) {
              try {
                  return Files.readAllLines(Paths.get(filePath));
              } catch (IOException ex) {
                  System.out.println("reading " + filePath + " failed - IOException");
              }
              return null;
          }
      }
    learner_created: true
  - name: src/phonebook/Search.java
    visible: true
    text: |
      package phonebook;
      
      import java.util.List;
      
      public interface Search {
          void accept(Visitor visitor);
          void search();
          void printStats();
      }
    learner_created: true
  - name: src/phonebook/BubbleSort.java
    visible: true
    text: |
      package phonebook;
      
      import java.util.ArrayList;
      import java.util.List;
      
      public class BubbleSort {
          static List<DirectoryEntry> sort(List<DirectoryEntry> entries, long timeout) {
              List<DirectoryEntry> sortedEntries = new ArrayList<DirectoryEntry>(entries);
              int n = sortedEntries.size();
              boolean swapped;
              DirectoryEntry next;
              DirectoryEntry cur;
      
              long startTime = System.currentTimeMillis();
      
              for(int i=0; i < n-1; i++){
                  swapped = false;
                  if ((System.currentTimeMillis() - startTime) > timeout) {
                      return new ArrayList<>();
                  }
                  for(int j=0; j < n-i-1; j++){
                      cur = sortedEntries.get(j);
                      next = sortedEntries.get(j+1);
                      if(cur.name.compareTo(next.name) > 0) {
                          swapped = true;
                          sortedEntries.set(j, next);
                          sortedEntries.set(j + 1, cur);
                      }
                  }
                  if (!swapped) break;
              }
              return sortedEntries;
          }
      }
    learner_created: true
  - name: src/phonebook/HashTableSearch.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/7721#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 22 Nov 2023 16:47:52 UTC"
record: -1
